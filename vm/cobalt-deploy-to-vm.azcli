#!/bin/bash
# filepath: c:\githublocal\armonazure\vm\cobalt-deploy-to-vm.azcli
# Updated: May 2025
# Create and Customize an ARM64 Azure VM

# ======================================================================================
# 4 steps: 
# Step 1: Set up the Environment
# Step 2: (Optional but highly recommended) Create a VNET and subnet
# Step 3: Create a VM
# Step 4: Customize the VM
# ======================================================================================

# Prerequisites: 
# - An Azure account with a subscription ID: https://azure.microsoft.com/en-us/free/
# - Install the latest Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli

# Check Azure CLI version
echo "Checking Azure CLI version..."
az version --query '"azure-cli"' -o tsv

# Check if user is logged in
echo "Checking if you're logged into Azure..."
SUBSCRIPTION_COUNT=$(az account list --query 'length([])')
if [ "$SUBSCRIPTION_COUNT" -eq "0" ]; then
  echo "You're not logged in. Please login to Azure."
  az login
else
  echo "You're already logged in to Azure."
  echo "Current subscription:"
  az account show --query name -o tsv
fi

# ======================================================================================
# Step 1: Set up the Environment
# ======================================================================================
echo -e "\n===== Step 1: Setting up the Environment =====\n"

# Set variables (replace with your own values or uncomment the read commands below to input interactively)
export RESOURCE_GROUP_NAME=<your resource group name>
export LOCATION=<your location>
export NETWORK_NAME=<your vnet name>
export NETWORK_SUBNET_NAME=<your subnet name>
export VM_NAME=<your VM name>

# Interactive input (uncomment to use)
# read -p "Resource Group Name: " RESOURCE_GROUP_NAME
# read -p "Location (e.g., eastus, westus2, etc.): " LOCATION
# read -p "Virtual Network Name: " NETWORK_NAME
# read -p "Subnet Name: " NETWORK_SUBNET_NAME
# read -p "VM Name: " VM_NAME

# Show current Arm64 images
echo "Fetching available ARM64 VM images from Canonical. This may take a moment..."
az vm image list \
    --architecture Arm64 \
    --publisher Canonical \
    --offer ubuntu-minimal \
    --all \
    --query "[?contains(sku, '22_04') || contains(sku, '20_04')].{Offer:offer, Publisher:publisher, SKU:sku, Version:version}" \
    -o table

# Set the ARM64 image to use for the VM (replace with your own values)
export sourcearmimage=<your ARM image name>
export sourcearmimagename=<your ARM image name>

# ======================================================================================
# Step 2: Create a Resource Group, VNET, and Subnet
# ======================================================================================
echo -e "\n===== Step 2: Creating Resource Group, VNET, and Subnet =====\n"

# Check if resource group exists
echo "Checking if resource group '$RESOURCE_GROUP_NAME' exists..."
RG_EXISTS=$(az group exists --name "$RESOURCE_GROUP_NAME")

if [ "$RG_EXISTS" = "true" ]; then
  echo "Resource group '$RESOURCE_GROUP_NAME' already exists."
else
  echo "Creating resource group '$RESOURCE_GROUP_NAME'..."
  az group create --resource-group "$RESOURCE_GROUP_NAME" --location "$LOCATION"
fi

# Check if vnet exists
echo "Checking if virtual network '$NETWORK_NAME' exists..."
VNET_EXISTS=$(az network vnet list --resource-group "$RESOURCE_GROUP_NAME" --query "[?name=='$NETWORK_NAME'].id" -o tsv)

if [ -n "$VNET_EXISTS" ]; then
  echo "Virtual network '$NETWORK_NAME' already exists."
else
  echo "Creating virtual network '$NETWORK_NAME'..."
  az network vnet create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --name "$NETWORK_NAME" \
    --address-prefixes "172.0.0.0/16"
fi

# Check if subnet exists
echo "Checking if subnet '$NETWORK_SUBNET_NAME' exists..."
SUBNET_EXISTS=$(az network vnet subnet list --resource-group "$RESOURCE_GROUP_NAME" --vnet-name "$NETWORK_NAME" --query "[?name=='$NETWORK_SUBNET_NAME'].id" -o tsv)

if [ -n "$SUBNET_EXISTS" ]; then
  echo "Subnet '$NETWORK_SUBNET_NAME' already exists."
else
  echo "Creating subnet '$NETWORK_SUBNET_NAME'..."
  az network vnet subnet create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --vnet-name "$NETWORK_NAME" \
    --address-prefixes "172.0.0.0/24" \
    --name "$NETWORK_SUBNET_NAME"
fi

# ======================================================================================
# Step 3: Create a VM
# ======================================================================================
echo -e "\n===== Step 3: Creating VM =====\n"

# Check if VM exists
echo "Checking if VM '$VM_NAME' exists..."
VM_EXISTS=$(az vm list --resource-group "$RESOURCE_GROUP_NAME" --query "[?name=='$VM_NAME'].id" -o tsv)

if [ -n "$VM_EXISTS" ]; then
  echo "VM '$VM_NAME' already exists."
else
  echo "Creating VM '$VM_NAME' with image $sourcearmimagename..."
  
  echo "This may take a few minutes..."
  az vm create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --name "$VM_NAME" \
    --image "$sourcearmimagename" \
    --vnet-name "$NETWORK_NAME" \
    --subnet "$NETWORK_SUBNET_NAME" \
    --public-ip-sku Standard \
    --generate-ssh-keys \
    --tags "Environment=Development" "Project=ArmVM"
  
  echo "VM creation complete!"
fi

# Open ports for HTTP access
echo "Opening ports 22 (SSH), 80 (HTTP), and 443 (HTTPS)..."
az vm open-port \
  --resource-group "$RESOURCE_GROUP_NAME" \
  --name "$VM_NAME" \
  --port "22,80,443" \
  --priority 100

# ======================================================================================
# Step 4: Connect to and Customize VM
# ======================================================================================
echo -e "\n===== Step 4: Connect to and Customize VM =====\n"

# Get the public IP address of the VM
VM_IP=$(az vm show -d -g "$RESOURCE_GROUP_NAME" -n "$VM_NAME" --query publicIps -o tsv)
echo "VM Public IP: $VM_IP"

echo "To connect to the VM via SSH:"
echo "  ssh azureuser@$VM_IP"

echo -e "\nExample customization script for installing Cassandra on Ubuntu:"
echo "======================================================================="
echo "# First, update packages and install dependencies"
echo "sudo apt-get update && sudo apt-get upgrade -y"
echo "sudo apt-get install -y apt-transport-https gnupg"
echo ""
echo "# Install Java"
echo "sudo apt-get install -y openjdk-11-jdk"
echo ""
echo "# Add Cassandra repository"
echo "echo \"deb https://debian.cassandra.apache.org 41x main\" | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list"
echo "curl https://downloads.apache.org/cassandra/KEYS | sudo apt-key add -"
echo "sudo apt-get update"
echo ""
echo "# Install Cassandra"
echo "sudo apt-get install -y cassandra"
echo ""
echo "# Start Cassandra service"
echo "sudo systemctl start cassandra"
echo "sudo systemctl enable cassandra"
echo ""
echo "# Check Cassandra status"
echo "sudo systemctl status cassandra"
echo "nodetool status"
echo "cqlsh localhost -e \"describe keyspaces;\""
echo "======================================================================="

echo -e "\nVM Setup Complete!"
echo "To customize the VM, connect to it via SSH and run your desired setup commands."

