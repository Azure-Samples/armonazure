#!/bin/bash
# filepath: c:\githublocal\armonazure\aks\cobalt-deploy-to-aks.azcli
# Updated: May 2025
# Full instructions at https://aka.ms/armonazure
# Create a new Azure Kubernetes Service running Cassandra on Azure Cobalt ARM64 VMs

# ======================================================================================
# 4 steps: 
# Step 1: Set up the Environment
# Step 2: Create an Azure Kubernetes Service (AKS) running on ARM64 
# Step 3: Create an Azure Container Registry (ACR) (Optional)
# Step 4: Deploy Cassandra to the Azure Kubernetes Service (AKS)
# ======================================================================================

# Prerequisites: 
# - An Azure account with a subscription ID: https://azure.microsoft.com/en-us/free/
# - Install the latest Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli

# Check Azure CLI version
echo "Checking Azure CLI version..."
az version --query '"azure-cli"' -o tsv

# Check if user is logged in
echo "Checking if you're logged into Azure..."
SUBSCRIPTION_COUNT=$(az account list --query 'length([])')
if [ "$SUBSCRIPTION_COUNT" -eq "0" ]; then
  echo "You're not logged in. Please login to Azure."
  az login
else
  echo "You're already logged in to Azure."
  echo "Current subscription:"
  az account show --query name -o tsv
fi

# ======================================================================================
# Step 1: Set up the Environment
# ======================================================================================
echo -e "\n===== Step 1: Setting up the Environment =====\n"

# For AKS commands (replace with your own values or uncomment the read commands below to input interactively)


# Interactive input (uncomment to use)
# read -p "Resource Group Name: " myResourceGroup
# read -p "Location (e.g., eastus, westus2, etc.): " mylocation
# read -p "AKS Cluster Name: " myAKSCluster
# read -p "ACR Name (leave empty to skip ACR creation): " myACRName
# if [ -n "$myACRName" ]; then
#   read -p "ACR Image Name [cassandra]: " myACRImage
#   myACRImage=${myACRImage:-cassandra}
#   read -p "ACR Image Tag [v1]: " myACRTag
#   myACRTag=${myACRTag:-v1}
# fi

# List available ARM64 VM sizes in the selected region
echo "Finding available ARM64 VM sizes in $mylocation..."
az vm list-sizes \
  --location "$mylocation" \
  --query "[?contains(name, 'D') && contains(name, 'ps') && contains(name, 'v5')].{Name:name, CPUs:numberOfCores, MemoryGB:memoryInMb}" \
  -o table

# Set the ARM64 VM size to use for AKS nodes (use Standard_D4ps_v5 or similar)
export nodeVMSize=Standard_D4ps_v5

# ======================================================================================
# Step 2: Create Azure Resources
# ======================================================================================
echo -e "\n===== Step 2: Creating Azure Resources =====\n"

# Check if resource group exists
echo "Checking if resource group '$myResourceGroup' exists..."
RG_EXISTS=$(az group exists --name "$myResourceGroup")

if [ "$RG_EXISTS" = "true" ]; then
  echo "Resource group '$myResourceGroup' already exists."
else
  echo "Creating resource group '$myResourceGroup'..."
  az group create --resource-group "$myResourceGroup" --location "$mylocation"
fi

# Check if AKS cluster exists
echo "Checking if AKS cluster '$myAKSCluster' exists..."
AKS_EXISTS=$(az aks list --resource-group "$myResourceGroup" --query "[?name=='$myAKSCluster'].id" -o tsv)

if [ -n "$AKS_EXISTS" ]; then
  echo "AKS cluster '$myAKSCluster' already exists."
else
  echo "Creating AKS cluster '$myAKSCluster'..."
  echo "This may take a few minutes..."
  
  # Create AKS cluster with Cobalt-based VMs
  az aks create \
    --resource-group "$myResourceGroup" \
    --name "$myAKSCluster" \
    --location "$mylocation" \
    --node-vm-size "$nodeVMSize" \
    --node-count "$nodeCount" \
    --generate-ssh-keys \
    --network-plugin azure \
    --network-policy azure \
    --tags "Environment=Development" "Project=ArmAKS"
    
  echo "AKS cluster creation complete!"
fi

# Install kubectl CLI if not already installed
if ! command -v kubectl &> /dev/null; then
  echo "Installing kubectl CLI..."
  az aks install-cli
fi

# Get AKS credentials
echo "Getting AKS credentials..."
az aks get-credentials --resource-group "$myResourceGroup" --name "$myAKSCluster" --overwrite-existing

# Verify AKS connection
echo "Verifying connection to AKS cluster..."
kubectl get nodes

# ======================================================================================
# Step 3: Create an Azure Container Registry (ACR) (Optional)
# ======================================================================================
echo -e "\n===== Step 3: Creating Azure Container Registry (Optional) =====\n"

if [ -n "$myACRName" ]; then
  # Check if ACR exists
  echo "Checking if ACR '$myACRName' exists..."
  ACR_EXISTS=$(az acr list --resource-group "$myResourceGroup" --query "[?name=='$myACRName'].id" -o tsv)

  if [ -n "$ACR_EXISTS" ]; then
    echo "ACR '$myACRName' already exists."
  else
    echo "Creating ACR '$myACRName'..."
    az acr create \
      --resource-group "$myResourceGroup" \
      --name "$myACRName" \
      --location "$mylocation" \
      --sku Standard \
      --admin-enabled true
    
    echo "ACR creation complete!"
  fi

  # Log in to the ACR
  echo "Logging in to ACR '$myACRName'..."
  az acr login --name "$myACRName"

  # Attach the ACR to the AKS instance
  echo "Attaching ACR to AKS..."
  az aks update -g "$myResourceGroup" -n "$myAKSCluster" --attach-acr "$myACRName"

  # Pull and push Cassandra image to ACR
  echo "Pulling Cassandra ARM64 image from DockerHub and pushing to ACR..."
  docker pull --platform linux/arm64 cassandra:latest
  docker tag cassandra:latest ${myACRName}.azurecr.io/${myACRImage}:${myACRTag}
  docker push ${myACRName}.azurecr.io/${myACRImage}:${myACRTag}
  
  echo "Image pushed to ACR: ${myACRName}.azurecr.io/${myACRImage}:${myACRTag}"
else
  echo "Skipping ACR creation as no ACR name was provided."
fi

# ======================================================================================
# Step 4: Deploy Cassandra to AKS
# ======================================================================================
echo -e "\n===== Step 4: Deploying Cassandra to AKS =====\n"

  echo "Which AKS deployment option would you prefer?"
  echo "0: Skip ARM64 Cassandra deployment"
  echo "1: Deploy ARM64 Cassandra directly from DockerHub"
  echo "2: Deploy ARM64 Cassandra from ACR (if you pushed an image)"
  read -r option
  
  if [ "$option" == "1" ]; then
    echo "Deploying Cassandra from DockerHub..."
    kubectl apply -f cassandra-deployment.yaml
    kubectl apply -f cassandra-service.yaml
  elif [ "$option" == "2" ]; then
    echo "Deploying Cassandra from ACR..."
    
    # Create a deployment file with ACR image
    cat > cassandra-deployment-from-acr.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      nodeSelector:
        kubernetes.io/arch: arm64
      containers:
        - name: cassandra
          image: ${myACRName}.azurecr.io/${myACRImage}:${myACRTag}
          ports:
            - containerPort: 7000
              name: intra-node
            - containerPort: 7001
              name: tls-intra-node
            - containerPort: 7199
              name: jmx
            - containerPort: 9042
              name: cql
          volumeMounts:
            - mountPath: /var/lib/cassandra
              name: data
      volumes:
        - name: data
          emptyDir: {}
EOF
    
    kubectl apply -f cassandra-deployment-from-acr.yaml
    kubectl apply -f cassandra-service.yaml
  else
    echo "Skipping Cassandra deployment."
  fi

# Validate deployment
echo -e "\n===== Validating Deployment =====\n"
echo "Waiting for pods to start..."
sleep 10

echo "Current pods:"
kubectl get pods

echo -e "\nCurrent services:"
kubectl get services

echo -e "\nAKS Dashboard URL:"
echo "https://portal.azure.com/#resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/${myResourceGroup}/providers/Microsoft.ContainerService/managedClusters/${myAKSCluster}/monitoring"

echo -e "\nTo view the Cassandra logs, run:"
echo "kubectl logs -l app=cassandra"

echo -e "\nTo connect to the Cassandra CQL shell, run:"
echo "kubectl exec -it \$(kubectl get pods -l app=cassandra -o jsonpath='{.items[0].metadata.name}') -- cqlsh"

echo -e "\nCheck the CASSANDRA-IMPROVEMENTS.md file for more information and best practices for running Cassandra on ARM64 nodes."

echo -e "\nAKS and Cassandra setup complete!"


